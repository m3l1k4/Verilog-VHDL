KCPSM3  v1.30.      Ken Chapman (Xilinx-UK) 2005

The assembler for KCPSM3 Programmable State Machine

PASS 1 - Reading input PSM file

; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
;
;
;
;
; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
; one second intervals.
;
;
;**************************************************************************************
; Port definitions
;**************************************************************************************
;
;
;
CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
CONSTANT DATA_IN_PORT, 00         ;input data port. this is an INPUT port.
;
;
;
; LCD interface ports
;
; The 8-bit communication interface can be used on the Spartan-3A Starter Kit
; as all pins are connected and dedicated.
;
CONSTANT LCD_output_port, 40        ;LCD character module output data
CONSTANT LCD_input_port, 01         ;LCD character module input data
CONSTANT LCD_DB0, 01                ;   8-bit          DB4 - bit0
CONSTANT LCD_DB1, 02                ;   interface      DB5 - bit1
CONSTANT LCD_DB2, 04                ;                  DB6 - bit2
CONSTANT LCD_DB3, 08                ;                  DB7 - bit3
CONSTANT LCD_DB4, 10                ;                  DB4 - bit4
CONSTANT LCD_DB5, 20                ;                  DB5 - bit5
CONSTANT LCD_DB6, 40                ;                  DB6 - bit6
CONSTANT LCD_DB7, 80                ;                  DB7 - bit7
;
CONSTANT LCD_control_port, 20       ;LCD character module control signals
CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
;**************************************************************************************
; Special Register usage
;**************************************************************************************
;
; No registers are given special names in this program.
;
;**************************************************************************************
; Scratch Pad Memory Locations
;**************************************************************************************
;
;
CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
;
CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)
;
;**************************************************************************************
; Useful data constants
;**************************************************************************************
;
;
; Constant to define a software delay of 1us. This must be adjusted to reflect the
; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
; calculation highly predictable. The '6' in the following equation even allows for
; 'CALL delay_1us' instruction in the initiating code.
;
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
;
; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
; For clock rates below 10MHz the value of 1 must be used and the operation will
; become lower than intended. Interrupts may effect the timing of software based
; delays.
;
CONSTANT delay_1us_constant, 05
;
;
;
;
;
;
;
;**************************************************************************************
; Initialise the system
main:
ENABLE INTERRUPT
INPUT s0,DATA_IN_PORT
;ADD s3, 01   ;read current counter value
COMPARE s3, FF   ; 255
ADDCY s3, 01
CALL delay_1s
CALL Z, display_LEDs
JUMP main
display_LEDs:
DISABLE INTERRUPT
FETCH s2, ISR_preserve_s2
OUTPUT s2, LED_port
LOAD s2, 00
STORE s2, ISR_preserve_s2
ENABLE INTERRUPT
RETURN
;**************************************************************************************
; Software delay routines
;**************************************************************************************
;
; Delay of 1us.
;
; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
; instruction executes in 2 clock cycles making the calculation highly predictable.
; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
; in the initiating code. Interrupts may effect software derived delays.
;
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
;
; Registers used s0
;
delay_1us: LOAD s0, delay_1us_constant
wait_1us: SUB s0, 01
JUMP NZ, wait_1us
RETURN
;
; Delay of 40us.
;
; Registers used s0, s1
;
delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
wait_40us: CALL delay_1us
SUB s1, 01
JUMP NZ, wait_40us
RETURN
;
;
; Delay of 1ms.
;
; Registers used s0, s1, s2
;
delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
wait_1ms: CALL delay_40us
SUB s2, 01
JUMP NZ, wait_1ms
RETURN
;
; Delay of 20ms.
;
; Delay of 20ms used during initialisation.
;
; Registers used s0, s1, s2, s3
;
delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
wait_20ms: CALL delay_1ms
SUB s3, 01
JUMP NZ, wait_20ms
RETURN
;
; Delay of approximately 1 second.
;
; Registers used s0, s1, s2, s3, s4
;
delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
wait_1s: CALL delay_20ms
SUB s4, 01
JUMP NZ, wait_1s
RETURN
;
; discard 8 msb for division
ISR:
STORE S3, ISR_preserve_s3  ; COUNTER
FETCH s2, ISR_preserve_s2
ADD s1, s0                          ;increment counter
ADDCY s2, s1
STORE s2, ISR_preserve_s2
FETCH s3, ISR_preserve_s3  ; msb
;**************************************************************************************
; Interrupt Vector
;**************************************************************************************
RETURNI ENABLE
ADDRESS 3FF
JUMP ISR

PASS 2 - Testing Instructions

; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
;
;
;
;
; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
; one second intervals.
;
;
;**************************************************************************************
; Port definitions
;**************************************************************************************
;
;
;
CONSTANT LED_port, 80;8 simple LEDs. Is an OUTPUT port.
CONSTANT DATA_IN_PORT, 00;input data port. this is an INPUT port.
;
;
;
; LCD interface ports
;
; The 8-bit communication interface can be used on the Spartan-3A Starter Kit
; as all pins are connected and dedicated.
;
CONSTANT LCD_output_port, 40;LCD character module output data
CONSTANT LCD_input_port, 01;LCD character module input data
CONSTANT LCD_DB0, 01;   8-bit          DB4 - bit0
CONSTANT LCD_DB1, 02;   interface      DB5 - bit1
CONSTANT LCD_DB2, 04;                  DB6 - bit2
CONSTANT LCD_DB3, 08;                  DB7 - bit3
CONSTANT LCD_DB4, 10;                  DB4 - bit4
CONSTANT LCD_DB5, 20;                  DB5 - bit5
CONSTANT LCD_DB6, 40;                  DB6 - bit6
CONSTANT LCD_DB7, 80;                  DB7 - bit7
;
CONSTANT LCD_control_port, 20;LCD character module control signals
CONSTANT LCD_E, 01;   active High Enable        E - bit0
CONSTANT LCD_RW, 02;   Read=1 Write=0           RW - bit1
CONSTANT LCD_RS, 04;   Instruction=0 Data=1     RS - bit2
;**************************************************************************************
; Special Register usage
;**************************************************************************************
;
; No registers are given special names in this program.
;
;**************************************************************************************
; Scratch Pad Memory Locations
;**************************************************************************************
;
;
CONSTANT ISR_preserve_s0, 00;Preserve s0 contents during ISR
CONSTANT ISR_preserve_s1, 01;Preserve s1 contents during ISR
CONSTANT ISR_preserve_s2, 02;Preserve s2 contents during ISR
CONSTANT ISR_preserve_s3, 03;Preserve s3 contents during ISR
;
CONSTANT LED_pattern, 04;remember state of LEDs (8-bit counter in this case)
;
;**************************************************************************************
; Useful data constants
;**************************************************************************************
;
;
; Constant to define a software delay of 1us. This must be adjusted to reflect the
; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
; calculation highly predictable. The '6' in the following equation even allows for
; 'CALL delay_1us' instruction in the initiating code.
;
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
;
; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
; For clock rates below 10MHz the value of 1 must be used and the operation will
; become lower than intended. Interrupts may effect the timing of software based
; delays.
;
CONSTANT delay_1us_constant, 05
;
;
;
;
;
;
;
;**************************************************************************************
; Initialise the system
main: 
ENABLE INTERRUPT
INPUT s0, DATA_IN_PORT
;ADD s3, 01   ;read current counter value
COMPARE s3, FF; 255
ADDCY s3, 01
CALL delay_1s
CALL Z, display_LEDs
JUMP main
display_LEDs: 
DISABLE INTERRUPT
FETCH s2, ISR_preserve_s2
OUTPUT s2, LED_port
LOAD s2, 00
STORE s2, ISR_preserve_s2
ENABLE INTERRUPT
RETURN
;**************************************************************************************
; Software delay routines
;**************************************************************************************
;
; Delay of 1us.
;
; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
; instruction executes in 2 clock cycles making the calculation highly predictable.
; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
; in the initiating code. Interrupts may effect software derived delays.
;
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
;
; Registers used s0
;
delay_1us: LOAD s0, delay_1us_constant
wait_1us: SUB s0, 01
JUMP NZ, wait_1us
RETURN
;
; Delay of 40us.
;
; Registers used s0, s1
;
delay_40us: LOAD s1, 28;40 x 1us = 40us
wait_40us: CALL delay_1us
SUB s1, 01
JUMP NZ, wait_40us
RETURN
;
;
; Delay of 1ms.
;
; Registers used s0, s1, s2
;
delay_1ms: LOAD s2, 19;25 x 40us = 1ms
wait_1ms: CALL delay_40us
SUB s2, 01
JUMP NZ, wait_1ms
RETURN
;
; Delay of 20ms.
;
; Delay of 20ms used during initialisation.
;
; Registers used s0, s1, s2, s3
;
delay_20ms: LOAD s3, 14;20 x 1ms = 20ms
wait_20ms: CALL delay_1ms
SUB s3, 01
JUMP NZ, wait_20ms
RETURN
;
; Delay of approximately 1 second.
;
; Registers used s0, s1, s2, s3, s4
;
delay_1s: LOAD s4, 32;50 x 20ms = 1000ms
wait_1s: CALL delay_20ms
SUB s4, 01
JUMP NZ, wait_1s
RETURN
;
; discard 8 msb for division
ISR: 
STORE S3, ISR_preserve_s3; COUNTER
FETCH s2, ISR_preserve_s2
ADD s1, s0;increment counter
ADDCY s2, s1
STORE s2, ISR_preserve_s2
FETCH s3, ISR_preserve_s3; msb
;**************************************************************************************
; Interrupt Vector
;**************************************************************************************
RETURNI ENABLE
ADDRESS 3FF
JUMP ISR

PASS 3 - Resolving addresses and line labels

000 ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
000 ;
000 ;
000 ;
000 ;
000 
; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
000 ; one second intervals.
000 ;
000 ;
000 
;**************************************************************************************
000 ; Port definitions
000 
;**************************************************************************************
000 ;
000 ;
000 ;
000 CONSTANT LED_port, 80;8 simple LEDs. Is an OUTPUT port.
000 CONSTANT DATA_IN_PORT, 00;input data port. this is an INPUT port.
000 ;
000 ;
000 ;
000 ; LCD interface ports
000 ;
000 
; The 8-bit communication interface can be used on the Spartan-3A Starter Kit
000 ; as all pins are connected and dedicated.
000 ;
000 CONSTANT LCD_output_port, 40;LCD character module output data
000 CONSTANT LCD_input_port, 01;LCD character module input data
000 CONSTANT LCD_DB0, 01;   8-bit          DB4 - bit0
000 CONSTANT LCD_DB1, 02;   interface      DB5 - bit1
000 CONSTANT LCD_DB2, 04;                  DB6 - bit2
000 CONSTANT LCD_DB3, 08;                  DB7 - bit3
000 CONSTANT LCD_DB4, 10;                  DB4 - bit4
000 CONSTANT LCD_DB5, 20;                  DB5 - bit5
000 CONSTANT LCD_DB6, 40;                  DB6 - bit6
000 CONSTANT LCD_DB7, 80;                  DB7 - bit7
000 ;
000 CONSTANT LCD_control_port, 20;LCD character module control signals
000 CONSTANT LCD_E, 01;   active High Enable        E - bit0
000 CONSTANT LCD_RW, 02;   Read=1 Write=0           RW - bit1
000 CONSTANT LCD_RS, 04;   Instruction=0 Data=1     RS - bit2
000 
;**************************************************************************************
000 ; Special Register usage
000 
;**************************************************************************************
000 ;
000 ; No registers are given special names in this program.
000 ;
000 
;**************************************************************************************
000 ; Scratch Pad Memory Locations
000 
;**************************************************************************************
000 ;
000 ;
000 CONSTANT ISR_preserve_s0, 00;Preserve s0 contents during ISR
000 CONSTANT ISR_preserve_s1, 01;Preserve s1 contents during ISR
000 CONSTANT ISR_preserve_s2, 02;Preserve s2 contents during ISR
000 CONSTANT ISR_preserve_s3, 03;Preserve s3 contents during ISR
000 ;
000 CONSTANT LED_pattern, 04;remember state of LEDs (8-bit counter in this case)
000 ;
000 
;**************************************************************************************
000 ; Useful data constants
000 
;**************************************************************************************
000 ;
000 ;
000 
; Constant to define a software delay of 1us. This must be adjusted to reflect the
000 
; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
000 
; calculation highly predictable. The '6' in the following equation even allows for
000 ; 'CALL delay_1us' instruction in the initiating code.
000 ;
000 
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
000 ;
000 ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
000 
; For clock rates below 10MHz the value of 1 must be used and the operation will
000 
; become lower than intended. Interrupts may effect the timing of software based
000 ; delays.
000 ;
000 CONSTANT delay_1us_constant, 05
000 ;
000 ;
000 ;
000 ;
000 ;
000 ;
000 ;
000 
;**************************************************************************************
000 ; Initialise the system
000 main: 
000 ENABLE INTERRUPT
001 INPUT s0, DATA_IN_PORT
002 ;ADD s3, 01   ;read current counter value
002 COMPARE s3, FF; 255
003 ADDCY s3, 01
004 CALL delay_1s
005 CALL Z, display_LEDs
006 JUMP main
007 display_LEDs: 
007 DISABLE INTERRUPT
008 FETCH s2, ISR_preserve_s2
009 OUTPUT s2, LED_port
00A LOAD s2, 00
00B STORE s2, ISR_preserve_s2
00C ENABLE INTERRUPT
00D RETURN
00E 
;**************************************************************************************
00E ; Software delay routines
00E 
;**************************************************************************************
00E ;
00E ; Delay of 1us.
00E ;
00E 
; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
00E 
; instruction executes in 2 clock cycles making the calculation highly predictable.
00E 
; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
00E ; in the initiating code. Interrupts may effect software derived delays.
00E ;
00E 
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
00E ;
00E ; Registers used s0
00E ;
00E delay_1us: LOAD s0, delay_1us_constant
00F wait_1us: SUB s0, 01
010 JUMP NZ, wait_1us
011 RETURN
012 ;
012 ; Delay of 40us.
012 ;
012 ; Registers used s0, s1
012 ;
012 delay_40us: LOAD s1, 28;40 x 1us = 40us
013 wait_40us: CALL delay_1us
014 SUB s1, 01
015 JUMP NZ, wait_40us
016 RETURN
017 ;
017 ;
017 ; Delay of 1ms.
017 ;
017 ; Registers used s0, s1, s2
017 ;
017 delay_1ms: LOAD s2, 19;25 x 40us = 1ms
018 wait_1ms: CALL delay_40us
019 SUB s2, 01
01A JUMP NZ, wait_1ms
01B RETURN
01C ;
01C ; Delay of 20ms.
01C ;
01C ; Delay of 20ms used during initialisation.
01C ;
01C ; Registers used s0, s1, s2, s3
01C ;
01C delay_20ms: LOAD s3, 14;20 x 1ms = 20ms
01D wait_20ms: CALL delay_1ms
01E SUB s3, 01
01F JUMP NZ, wait_20ms
020 RETURN
021 ;
021 ; Delay of approximately 1 second.
021 ;
021 ; Registers used s0, s1, s2, s3, s4
021 ;
021 delay_1s: LOAD s4, 32;50 x 20ms = 1000ms
022 wait_1s: CALL delay_20ms
023 SUB s4, 01
024 JUMP NZ, wait_1s
025 RETURN
026 ;
026 ; discard 8 msb for division
026 ISR: 
026 STORE S3, ISR_preserve_s3; COUNTER
027 FETCH s2, ISR_preserve_s2
028 ADD s1, s0;increment counter
029 ADDCY s2, s1
02A STORE s2, ISR_preserve_s2
02B FETCH s3, ISR_preserve_s3; msb
02C 
;**************************************************************************************
02C ; Interrupt Vector
02C 
;**************************************************************************************
02C RETURNI ENABLE
02D ADDRESS 3FF
3FF JUMP ISR

PASS 4 - Resolving Operands

000 ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
000 ;
000 ;
000 ;
000 ;
000 
; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
000 ; one second intervals.
000 ;
000 ;
000 
;**************************************************************************************
000 ; Port definitions
000 
;**************************************************************************************
000 ;
000 ;
000 ;
000 CONSTANT LED_port, 80;8 simple LEDs. Is an OUTPUT port.
000 CONSTANT DATA_IN_PORT, 00;input data port. this is an INPUT port.
000 ;
000 ;
000 ;
000 ; LCD interface ports
000 ;
000 
; The 8-bit communication interface can be used on the Spartan-3A Starter Kit
000 ; as all pins are connected and dedicated.
000 ;
000 CONSTANT LCD_output_port, 40;LCD character module output data
000 CONSTANT LCD_input_port, 01;LCD character module input data
000 CONSTANT LCD_DB0, 01;   8-bit          DB4 - bit0
000 CONSTANT LCD_DB1, 02;   interface      DB5 - bit1
000 CONSTANT LCD_DB2, 04;                  DB6 - bit2
000 CONSTANT LCD_DB3, 08;                  DB7 - bit3
000 CONSTANT LCD_DB4, 10;                  DB4 - bit4
000 CONSTANT LCD_DB5, 20;                  DB5 - bit5
000 CONSTANT LCD_DB6, 40;                  DB6 - bit6
000 CONSTANT LCD_DB7, 80;                  DB7 - bit7
000 ;
000 CONSTANT LCD_control_port, 20;LCD character module control signals
000 CONSTANT LCD_E, 01;   active High Enable        E - bit0
000 CONSTANT LCD_RW, 02;   Read=1 Write=0           RW - bit1
000 CONSTANT LCD_RS, 04;   Instruction=0 Data=1     RS - bit2
000 
;**************************************************************************************
000 ; Special Register usage
000 
;**************************************************************************************
000 ;
000 ; No registers are given special names in this program.
000 ;
000 
;**************************************************************************************
000 ; Scratch Pad Memory Locations
000 
;**************************************************************************************
000 ;
000 ;
000 CONSTANT ISR_preserve_s0, 00;Preserve s0 contents during ISR
000 CONSTANT ISR_preserve_s1, 01;Preserve s1 contents during ISR
000 CONSTANT ISR_preserve_s2, 02;Preserve s2 contents during ISR
000 CONSTANT ISR_preserve_s3, 03;Preserve s3 contents during ISR
000 ;
000 CONSTANT LED_pattern, 04;remember state of LEDs (8-bit counter in this case)
000 ;
000 
;**************************************************************************************
000 ; Useful data constants
000 
;**************************************************************************************
000 ;
000 ;
000 
; Constant to define a software delay of 1us. This must be adjusted to reflect the
000 
; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
000 
; calculation highly predictable. The '6' in the following equation even allows for
000 ; 'CALL delay_1us' instruction in the initiating code.
000 ;
000 
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
000 ;
000 ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
000 
; For clock rates below 10MHz the value of 1 must be used and the operation will
000 
; become lower than intended. Interrupts may effect the timing of software based
000 ; delays.
000 ;
000 CONSTANT delay_1us_constant, 05
000 ;
000 ;
000 ;
000 ;
000 ;
000 ;
000 ;
000 
;**************************************************************************************
000 ; Initialise the system
000 main: 
000 ENABLE INTERRUPT
001 INPUT s0, DATA_IN_PORT
002 ;ADD s3, 01   ;read current counter value
002 COMPARE s3, FF; 255
003 ADDCY s3, 01
004 CALL delay_1s
005 CALL Z, display_LEDs
006 JUMP main
007 display_LEDs: 
007 DISABLE INTERRUPT
008 FETCH s2, ISR_preserve_s2
009 OUTPUT s2, LED_port
00A LOAD s2, 00
00B STORE s2, ISR_preserve_s2
00C ENABLE INTERRUPT
00D RETURN
00E 
;**************************************************************************************
00E ; Software delay routines
00E 
;**************************************************************************************
00E ;
00E ; Delay of 1us.
00E ;
00E 
; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
00E 
; instruction executes in 2 clock cycles making the calculation highly predictable.
00E 
; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
00E ; in the initiating code. Interrupts may effect software derived delays.
00E ;
00E 
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
00E ;
00E ; Registers used s0
00E ;
00E delay_1us: LOAD s0, delay_1us_constant
00F wait_1us: SUB s0, 01
010 JUMP NZ, wait_1us
011 RETURN
012 ;
012 ; Delay of 40us.
012 ;
012 ; Registers used s0, s1
012 ;
012 delay_40us: LOAD s1, 28;40 x 1us = 40us
013 wait_40us: CALL delay_1us
014 SUB s1, 01
015 JUMP NZ, wait_40us
016 RETURN
017 ;
017 ;
017 ; Delay of 1ms.
017 ;
017 ; Registers used s0, s1, s2
017 ;
017 delay_1ms: LOAD s2, 19;25 x 40us = 1ms
018 wait_1ms: CALL delay_40us
019 SUB s2, 01
01A JUMP NZ, wait_1ms
01B RETURN
01C ;
01C ; Delay of 20ms.
01C ;
01C ; Delay of 20ms used during initialisation.
01C ;
01C ; Registers used s0, s1, s2, s3
01C ;
01C delay_20ms: LOAD s3, 14;20 x 1ms = 20ms
01D wait_20ms: CALL delay_1ms
01E SUB s3, 01
01F JUMP NZ, wait_20ms
020 RETURN
021 ;
021 ; Delay of approximately 1 second.
021 ;
021 ; Registers used s0, s1, s2, s3, s4
021 ;
021 delay_1s: LOAD s4, 32;50 x 20ms = 1000ms
022 wait_1s: CALL delay_20ms
023 SUB s4, 01
024 JUMP NZ, wait_1s
025 RETURN
026 ;
026 ; discard 8 msb for division
026 ISR: 
026 STORE S3, ISR_preserve_s3; COUNTER
027 FETCH s2, ISR_preserve_s2
028 ADD s1, s0;increment counter
029 ADDCY s2, s1
02A STORE s2, ISR_preserve_s2
02B FETCH s3, ISR_preserve_s3; msb
02C 
;**************************************************************************************
02C ; Interrupt Vector
02C 
;**************************************************************************************
02C RETURNI ENABLE
3FF ADDRESS 3FF
3FF JUMP ISR

PASS 5 - Writing reformatted PSM file
           pracpico.fmt

PASS 6 - Writing assembler log file
           pracpico.log

PASS 7 - Writing coefficient file
           pracpico.coe

PASS 8 - Writing VHDL memory definition file
           pracpico.vhd

PASS 9 - Writing Verilog memory definition file
           pracpico.v

PASS 10 - Writing System Generator memory definition file
           pracpico.m

PASS 11 - Writing memory definition files
           pracpico.hex
           pracpico.dec
           pracpico.mem


KCPSM3 successful.

KCPSM3 complete.

