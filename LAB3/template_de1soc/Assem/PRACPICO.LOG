KCPSM3 Assembler log file for program 'pracpico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
01Mar2019-27:42:46

 Addr Code

 000                       ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                       ; one second intervals.
 000                       ;
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Port definitions
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       ;
 000                       CONSTANT LED_port, 80           ;8 simple LEDs. Is an OUTPUT port.
 000                       CONSTANT DATA_IN_PORT, 00       ;input data port. this is an INPUT port.
 000                       ;
 000                       ;
 000                       ;
 000                       ; LCD interface ports
 000                       ;
 000                       ; The 8-bit communication interface can be used on the Spartan-3A Starter Kit
 000                       ; as all pins are connected and dedicated.
 000                       ;
 000                       CONSTANT LCD_output_port, 40    ;LCD character module output data
 000                       CONSTANT LCD_input_port, 01     ;LCD character module input data
 000                       CONSTANT LCD_DB0, 01            ;   8-bit          DB4 - bit0
 000                       CONSTANT LCD_DB1, 02            ;   interface      DB5 - bit1
 000                       CONSTANT LCD_DB2, 04            ;                  DB6 - bit2
 000                       CONSTANT LCD_DB3, 08            ;                  DB7 - bit3
 000                       CONSTANT LCD_DB4, 10            ;                  DB4 - bit4
 000                       CONSTANT LCD_DB5, 20            ;                  DB5 - bit5
 000                       CONSTANT LCD_DB6, 40            ;                  DB6 - bit6
 000                       CONSTANT LCD_DB7, 80            ;                  DB7 - bit7
 000                       ;
 000                       CONSTANT LCD_control_port, 20   ;LCD character module control signals
 000                       CONSTANT LCD_E, 01              ;   active High Enable        E - bit0
 000                       CONSTANT LCD_RW, 02             ;   Read=1 Write=0           RW - bit1
 000                       CONSTANT LCD_RS, 04             ;   Instruction=0 Data=1     RS - bit2
 000                       ;**************************************************************************************
 000                       ; Special Register usage
 000                       ;**************************************************************************************
 000                       ;
 000                       ; No registers are given special names in this program.
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Scratch Pad Memory Locations
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       CONSTANT ISR_preserve_s0, 00    ;Preserve s0 contents during ISR
 000                       CONSTANT ISR_preserve_s1, 01    ;Preserve s1 contents during ISR
 000                       CONSTANT ISR_preserve_s2, 02    ;Preserve s2 contents during ISR
 000                       CONSTANT ISR_preserve_s3, 03    ;Preserve s3 contents during ISR
 000                       ;
 000                       CONSTANT LED_pattern, 04        ;remember state of LEDs (8-bit counter in this case)
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Useful data constants
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                       ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                       ; calculation highly predictable. The '6' in the following equation even allows for
 000                       ; 'CALL delay_1us' instruction in the initiating code.
 000                       ;
 000                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                       ;
 000                       ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
 000                       ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                       ; become lower than intended. Interrupts may effect the timing of software based
 000                       ; delays.
 000                       ;
 000                       CONSTANT delay_1us_constant, 05
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Initialise the system
 000                 main: 
 000  3C001                ENABLE INTERRUPT
 001  04000                INPUT s0, DATA_IN_PORT[00]
 002                       ;ADD s3, 01   ;read current counter value
 002  143FF                COMPARE s3, FF                  ; 255
 003  1A301                ADDCY s3, 01
 004  30021                CALL delay_1s[021]
 005  31007                CALL Z, display_LEDs[007]
 006  34000                JUMP main[000]
 007         display_LEDs: 
 007  3C000                DISABLE INTERRUPT
 008  06202                FETCH s2, ISR_preserve_s2[02]
 009  2C280                OUTPUT s2, LED_port[80]
 00A  00200                LOAD s2, 00
 00B  2E202                STORE s2, ISR_preserve_s2[02]
 00C  3C001                ENABLE INTERRUPT
 00D  2A000                RETURN
 00E                       ;**************************************************************************************
 00E                       ; Software delay routines
 00E                       ;**************************************************************************************
 00E                       ;
 00E                       ; Delay of 1us.
 00E                       ;
 00E                       ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 00E                       ; instruction executes in 2 clock cycles making the calculation highly predictable.
 00E                       ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 00E                       ; in the initiating code. Interrupts may effect software derived delays.
 00E                       ;
 00E                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 00E                       ;
 00E                       ; Registers used s0
 00E                       ;
 00E  00005     delay_1us: LOAD s0, delay_1us_constant[05]
 00F  1C001      wait_1us: SUB s0, 01
 010  3540F                JUMP NZ, wait_1us[00F]
 011  2A000                RETURN
 012                       ;
 012                       ; Delay of 40us.
 012                       ;
 012                       ; Registers used s0, s1
 012                       ;
 012  00128    delay_40us: LOAD s1, 28                     ;40 x 1us = 40us
 013  3000E     wait_40us: CALL delay_1us[00E]
 014  1C101                SUB s1, 01
 015  35413                JUMP NZ, wait_40us[013]
 016  2A000                RETURN
 017                       ;
 017                       ;
 017                       ; Delay of 1ms.
 017                       ;
 017                       ; Registers used s0, s1, s2
 017                       ;
 017  00219     delay_1ms: LOAD s2, 19                     ;25 x 40us = 1ms
 018  30012      wait_1ms: CALL delay_40us[012]
 019  1C201                SUB s2, 01
 01A  35418                JUMP NZ, wait_1ms[018]
 01B  2A000                RETURN
 01C                       ;
 01C                       ; Delay of 20ms.
 01C                       ;
 01C                       ; Delay of 20ms used during initialisation.
 01C                       ;
 01C                       ; Registers used s0, s1, s2, s3
 01C                       ;
 01C  00314    delay_20ms: LOAD s3, 14                     ;20 x 1ms = 20ms
 01D  30017     wait_20ms: CALL delay_1ms[017]
 01E  1C301                SUB s3, 01
 01F  3541D                JUMP NZ, wait_20ms[01D]
 020  2A000                RETURN
 021                       ;
 021                       ; Delay of approximately 1 second.
 021                       ;
 021                       ; Registers used s0, s1, s2, s3, s4
 021                       ;
 021  00432      delay_1s: LOAD s4, 32                     ;50 x 20ms = 1000ms
 022  3001C       wait_1s: CALL delay_20ms[01C]
 023  1C401                SUB s4, 01
 024  35422                JUMP NZ, wait_1s[022]
 025  2A000                RETURN
 026                       ;
 026                       ; discard 8 msb for division
 026                  ISR: 
 026  2E303                STORE s3, ISR_preserve_s3[03]   ; COUNTER
 027  06202                FETCH s2, ISR_preserve_s2[02]
 028  19100                ADD s1, s0                      ;increment counter
 029  1B210                ADDCY s2, s1
 02A  2E202                STORE s2, ISR_preserve_s2[02]
 02B  06303                FETCH s3, ISR_preserve_s3[03]   ; msb
 02C                       ;**************************************************************************************
 02C                       ; Interrupt Vector
 02C                       ;**************************************************************************************
 02C  38001                RETURNI ENABLE
 3FF                       ADDRESS 3FF
 3FF  34026                JUMP ISR[026]
